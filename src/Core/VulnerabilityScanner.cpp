#include "Core/VulnerabilityScanner.h"
#include "Parser/CppParser.h"
#include <iostream>
#include <filesystem>

namespace fs = std::filesystem;

void VulnerabilityScanner::registerAnalyzer(std::shared_ptr<BaseAnalyzer> analyzer) {
    analyzers.push_back(analyzer);
}

bool VulnerabilityScanner::scanFile(const std::string& filePath) {
    CppParser parser(filePath);
    
    if (!parser.process()) {
        std::cerr << "Failed to process file: " << filePath << std::endl;
        return false;
    }

    for (auto& analyzer : analyzers) {
        analyzer->analyze(parser);
        const auto& analyzerVulns = analyzer->getVulnerabilities();
        vulnerabilities.insert(
            vulnerabilities.end(),
            analyzerVulns.begin(),
            analyzerVulns.end()
        );
    }

    return true;
}

int VulnerabilityScanner::scanDirectory(const std::string& directoryPath, bool recursive) {
    int filesScanned = 0;

    try {
        for (const auto& entry : fs::directory_iterator(directoryPath)) {
            if (entry.is_regular_file()) {
                std::string extension = entry.path().extension().string();
                if (extension == ".cpp" || extension == ".h" || 
                    extension == ".hpp" || extension == ".cc") {
                    
                    if (scanFile(entry.path().string())) {
                        filesScanned++;
                    }
                }
            } else if (recursive && entry.is_directory()) {
                filesScanned += scanDirectory(entry.path().string(), true);
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "Error scanning directory: " << e.what() << std::endl;
    }

    return filesScanned;
}

const std::vector<Vulnerability>& VulnerabilityScanner::getVulnerabilities() const {
    return vulnerabilities;
}